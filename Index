<!DOCTYPE html>
<html lang="pt-BR" data-theme="dark">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Recebimento em Dinheiro — Financeiro Jailton</title>
  <style>
    :root{
      --bg:#0F1420; --card:#131B2A; --text:#EAF2F7; --muted:#9FB0C3;
      --line:#24324A; --primary:#2E7CF7; --ok:#22C55E; --err:#DC2626;
      --radius:16px; --shadow:0 10px 30px rgba(0,0,0,.35);
      --overlay:rgba(0,0,0,.55);
    }
    html[data-theme="light"]{
      --bg:#F5F7FB; --card:#FFFFFF; --text:#0E1726; --muted:#5F6B7A;
      --line:#DCE4EF; --primary:#1E63E9; --ok:#16A34A; --err:#DC2626;
      --shadow:0 8px 24px rgba(0,0,0,.08);
      --overlay:rgba(0,0,0,.35);
    }
    *{box-sizing:border-box}
    body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;font-size:14px}
    .wrap{max-width:1120px;margin:20px auto;padding:0 16px}
    .hero{position:relative;margin:16px auto 22px;background: linear-gradient(90deg,#1E63E9,#2E7CF7);border-radius:28px;padding:28px 18px 26px;color:#fff;box-shadow:var(--shadow)}
    .hero h1{margin:0 0 4px;font-size:28px;font-weight:800;text-align:center}
    .hero p{margin:0;text-align:center;font-weight:600;opacity:.95}
    .tabs{display:flex;gap:8px;justify-content:center;margin-top:14px}
    .tabbtn{background:transparent;border:1.5px solid rgba(255,255,255,.75);color:#fff;padding:10px 16px;border-radius:12px;cursor:pointer;font-weight:800;min-height:44px}
    .tabbtn.active{background:#ffffff; color:#0E1726; border-color:#ffffff}
    .theme-btn{position:absolute;right:14px;top:14px;width:44px;height:44px;border-radius:999px;background:rgba(255,255,255,.2);border:2px solid rgba(255,255,255,.85);display:flex;align-items:center;justify-content:center;cursor:pointer;outline:none}
    .theme-btn svg{width:22px;height:22px}
    .theme-btn:focus{box-shadow:0 0 0 3px rgba(255,255,255,.5)}
    .panel{background:var(--card);border:1px solid var(--line);border-radius:var(--radius);padding:16px;margin-bottom:14px;box-shadow:var(--shadow)}
    .panel h2{margin:0 0 12px;font-size:18px}
    .sep{height:1px;background:var(--line);margin:12px 0}
    .row{display:grid;grid-template-columns:repeat(12,1fr);gap:10px}
    .col-12{grid-column:span 12}
    .col-6{grid-column:span 12}@media(min-width:880px){.col-6{grid-column:span 6}}
    .col-4{grid-column:span 12}@media(min-width:880px){.col-4{grid-column:span 4}}
    .col-3{grid-column:span 12}@media(min-width:880px){.col-3{grid-column:span 3}}
    label{font-size:12px;color:var(--muted);display:block;margin:0 0 6px}
    .checkline{display:flex;align-items:center;gap:8px;margin-top:8px;color:var(--text)}
    .checkline input[type=checkbox]{width:18px;height:18px}
    input,textarea{width:100%;background:transparent;border:1px solid var(--line);color:var(--text);padding:10px 12px;border-radius:12px;outline:none;font-size:14px}
    input::placeholder{color:var(--muted)}
    input:focus,textarea:focus{border-color:var(--primary);box-shadow:0 0 0 3px rgba(46,124,247,.25)}
    textarea{min-height:120px;resize:vertical}
    .actions{display:flex;gap:8px;flex-wrap:wrap}
    button{background:transparent;border:1px solid var(--line);color:var(--text);padding:10px 14px;border-radius:12px;cursor:pointer;font-weight:800;min-height:44px}
    button.primary{background:var(--primary);border-color:var(--primary);color:#fff}
    button.danger{background:#3a1623;border-color:#5a2235;color:#fff}
    button:disabled{opacity:.5;cursor:not-allowed}
    html[data-theme="light"] button{border-color:#C9D4E6}
    .table-wrap{overflow-x:auto}
    table{width:100%;border-collapse:separate;border-spacing:0 8px;min-width:820px}
    thead th{font-size:12px;color:var(--muted);text-align:left;padding:0 10px}
    tbody tr{background:transparent;border:1px solid var(--line)}
    tbody td{padding:8px 10px;background:transparent}
    tfoot td{padding:10px 10px;background:transparent;border-top:2px solid var(--line);font-weight:800}
    .nowrap{white-space:nowrap}
    .muted{color:var(--muted)}
    .hidden{display:none !important}
    .pill{display:inline-block;padding:6px 10px;border-radius:999px;border:1px solid var(--line);font-weight:700}

    /* Modal (Resumo em página) */
    .modal{position:fixed;inset:0;background:var(--overlay);display:none;align-items:center;justify-content:center;padding:20px;z-index:1000}
    .modal[aria-hidden="false"]{display:flex}
    .modal-card{width:min(880px,96vw);max-height:90vh;overflow:auto;background:var(--card);border:1px solid var(--line);border-radius:20px;box-shadow:var(--shadow)}
    .modal-head{display:flex;align-items:center;justify-content:space-between;padding:16px 18px;border-bottom:1px solid var(--line)}
    .modal-title{margin:0;font-size:18px;font-weight:800}
    .modal-body{padding:16px 18px}
    .modal-foot{padding:14px 18px;border-top:1px solid var(--line);display:flex;justify-content:flex-end;gap:8px}
    .tag{display:inline-block;padding:4px 10px;border:1px solid var(--line);border-radius:999px;font-weight:700}
    .grid-2{display:grid;grid-template-columns:1fr;gap:12px}
    @media(min-width:720px){.grid-2{grid-template-columns:1fr 1fr}}
    .list{margin:0;padding-left:18px}
    .list li{margin:4px 0}
    .field-error{font-size:12px;color:var(--err);margin-top:4px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="hero">
      <button id="themeBtn" class="theme-btn" aria-label="Alternar tema" title="Alternar tema">
        <svg id="icoMoon" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
        </svg>
        <svg id="icoSun" viewBox="0 0 24 24" class="hidden" fill="none" stroke="#0E1726" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
      </button>
      <h1>Recebimento em Dinheiro</h1>
      <p>Desenvolvido por <b>Financeiro Jailton</b></p>
      <div class="tabs">
        <button class="tabbtn active" data-tab="fechamento" aria-selected="true">Fechamento</button>
        <button class="tabbtn" data-tab="historico" aria-selected="false">Histórico</button>
      </div>
    </div>

    <!-- FECHAMENTO -->
    <section id="tab-fechamento">
      <div class="panel">
        <h2>Fechamento do Período</h2>
        <div class="row">
          <div class="col-4">
            <label>Período (início)</label>
            <input type="date" id="dtInicio" placeholder="dd/mm/aaaa"/>
          </div>
          <div class="col-4">
            <label>Período (fim)</label>
            <input type="date" id="dtFim" placeholder="dd/mm/aaaa"/>
          </div>
          <div class="col-4">
            <label>Data do depósito</label>
            <input type="date" id="dtDeposito" placeholder="dd/mm/aaaa"/>
          </div>

          <div class="col-6">
            <label>Valor depositado (R$)</label>
            <input type="text" id="valorDeposito" inputmode="numeric" placeholder="R$ 0,00" />
            <div class="pill" id="pillConc">Aguardando</div>
            <div class="checkline">
              <input type="checkbox" id="toggleAjuste"/>
              <label for="toggleAjuste" style="margin:0">Houve diferença/uso de caixa?</label>
            </div>
          </div>

          <div class="col-6" id="ajusteBox" style="display:none">
            <div class="row">
              <div class="col-6">
                <label>Diferença (±R$)</label>
                <input type="text" id="ajuste" inputmode="numeric" placeholder="R$ 0,00"/>
              </div>
              <div class="col-6">
                <label>Motivo da diferença</label>
                <input type="text" id="motivo" placeholder="Ex.: pagamento local, troco, acerto de caixa"/>
              </div>
            </div>
          </div>

          <div class="col-12">
            <label>Responsável pelo lançamento</label>
            <input type="text" id="responsavel" placeholder="Ex.: Maria Souza"/>
            <div id="respErr" class="field-error hidden">Informe o responsável pelo lançamento.</div>
          </div>
        </div>

        <div class="sep"></div>
        <div class="actions" style="justify-content:flex-end">
          <button class="primary" id="btnValidar">Validar</button>
          <button id="btnFechar" disabled>Fechar Lote</button>
        </div>
      </div>

      <div class="panel">
        <h2>Pedidos em Dinheiro</h2>
        <div class="actions" style="margin-bottom:6px">
          <button class="primary" id="btnAdd">Adicionar pedido</button>
          <button class="danger" id="btnClear">Limpar todas</button>
        </div>
        <div class="sep" style="margin:8px 0"></div>
        <div class="table-wrap">
          <table>
            <thead>
              <tr>
                <th>Cliente</th>
                <th class="nowrap">Nº do pedido (Bling)</th>
                <th class="nowrap">Valor (R$)</th>
                <th>Ações</th>
              </tr>
            </thead>
            <tbody id="tbody"></tbody>
          </table>
        </div>
      </div>

      <div class="panel">
        <h2>Resumo do Lote</h2>
        <div class="row">
          <div class="col-4">
            <label>Total das Entradas</label>
            <div id="kpiTotal" style="font-weight:800">R$ 0,00</div>
          </div>
          <div class="col-4">
            <label>Ajuste de Caixa (±R$)</label>
            <div id="kpiAjuste" class="muted">R$ 0,00</div>
          </div>
          <div class="col-4">
            <label>Valor Depositado</label>
            <div id="kpiDepositado" style="font-weight:800">R$ 0,00</div>
          </div>
        </div>
      </div>
    </section>

    <!-- HISTÓRICO -->
    <section id="tab-historico" class="hidden">
      <div class="panel">
        <h2>Filtros</h2>
        <div class="row">
          <div class="col-3">
            <label>Competência (Mês/Ano)</label>
            <input type="month" id="fCompetencia"/>
          </div>
          <div class="col-3">
            <label>Período (início)</label>
            <input type="date" id="fInicio"/>
          </div>
          <div class="col-3">
            <label>Período (fim)</label>
            <input type="date" id="fFim"/>
          </div>
          <div class="col-3" style="display:flex;align-items:end;gap:8px">
            <button class="primary" id="btnAplicarFiltro">Aplicar</button>
            <button id="btnLimparFiltro">Limpar</button>
          </div>
        </div>
      </div>

      <div class="panel">
        <h2>Histórico de Depósitos por Lote</h2>
        <div class="table-wrap">
          <table id="histTable">
            <thead>
              <tr>
                <th>Período</th>
                <th class="nowrap">Data Depósito</th>
                <th class="nowrap">Subtotal (R$)</th>
                <th class="nowrap">Ajuste (R$)</th>
                <th class="nowrap">Valor Depositado (R$)</th>
                <th class="nowrap">Pedidos</th>
                <th class="nowrap">Responsável</th>
                <th>Ações</th>
              </tr>
            </thead>
            <tbody id="tbodyHist"></tbody>
            <tfoot>
              <tr>
                <td colspan="2">Totais do filtro</td>
                <td id="ftSubtotal">—</td>
                <td id="ftAjuste">—</td>
                <td id="ftDepositado">—</td>
                <td id="ftQtd">—</td>
                <td colspan="2"></td>
              </tr>
            </tfoot>
          </table>
        </div>
        <div class="muted" style="margin-top:8px">Mais recentes no topo. (Volátil: sem localStorage. Firebase entrará depois.)</div>
      </div>
    </section>
  </div>

  <!-- MODAL: Resumo do Lote (em página) -->
  <div class="modal" id="modal" aria-hidden="true" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
    <div class="modal-card">
      <div class="modal-head">
        <h3 class="modal-title" id="modalTitle">Resumo do Lote</h3>
        <div class="actions">
          <button id="btnPrint">Imprimir</button>
          <button class="primary" id="btnCloseModal">Fechar</button>
        </div>
      </div>
      <div class="modal-body" id="modalBody"></div>
      <div class="modal-foot">
        <span class="muted">Regra: Subtotal – Ajuste = Valor Depositado</span>
      </div>
    </div>
  </div>

  <script type="module">
    const $ = (s)=>document.querySelector(s);
    const $$ = (s)=>document.querySelectorAll(s);
    const BRL = new Intl.NumberFormat('pt-BR',{style:'currency',currency:'BRL'});
    const fmt = (n)=> BRL.format(Number.isFinite(+n)?+n:0);
    const tol = 0.005;
    const DEL_PASS = '63258116';

    function maskBRLInput(el, allowNegative=false){
      const raw = el.value ?? '';
      const isNeg = allowNegative && raw.trim().startsWith('-');
      const digits = raw.replace(/[^0-9]/g,'');
      let cents = digits.length ? parseInt(digits,10) : 0;
      let val = (cents/100) * (isNeg ? -1 : 1);
      el.dataset.value = String(val);
      el.value = fmt(val);
    }
    function getBRL(el){ return Number(el?.dataset?.value ?? 0); }
    const normPedido = (v)=> String(v??'').trim().toLowerCase();

    // Theme
    const themeBtn = $('#themeBtn'); const icoMoon = $('#icoMoon'); const icoSun = $('#icoSun');
    function syncThemeButton(){
      const isLight = document.documentElement.getAttribute('data-theme')==='light';
      icoMoon.classList.toggle('hidden', isLight);
      icoSun.classList.toggle('hidden', !isLight);
    }
    themeBtn.addEventListener('click',()=>{
      const current = document.documentElement.getAttribute('data-theme') || 'dark';
      const next = current==='dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', next);
      syncThemeButton();
    });
    syncThemeButton();

    // Tabs
    $$('.tabbtn').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        $$('.tabbtn').forEach(b=>{ b.classList.remove('active'); b.setAttribute('aria-selected','false'); });
        btn.classList.add('active'); btn.setAttribute('aria-selected','true');
        const tab = btn.dataset.tab;
        $('#tab-fechamento').classList.toggle('hidden', tab!=='fechamento');
        $('#tab-historico').classList.toggle('hidden', tab!=='historico');
        if(tab==='historico') renderHistorico();
      });
    });

    // State
    let rows = [];                // linhas do formulário atual
    let lots = [];                // histórico em memória
    let editModeId = null;        // somente para NOVA linha (sem editar existentes)

    const dtInicio = $('#dtInicio'), dtFim = $('#dtFim'), dtDeposito = $('#dtDeposito');
    const valorDeposito = $('#valorDeposito'), pillConc = $('#pillConc');
    const toggleAjuste = $('#toggleAjuste'), ajusteBox = document.getElementById('ajusteBox'), ajuste = $('#ajuste'), motivo = $('#motivo');
    const btnFechar = $('#btnFechar');
    const kpiTotal = $('#kpiTotal'), kpiAjuste = $('#kpiAjuste'), kpiDepositado = $('#kpiDepositado');
    const tbody = $('#tbody');
    const responsavel = $('#responsavel'), respErr = $('#respErr');

    let userEditedDeposit = false;

    // Masks
    valorDeposito.addEventListener('input', ()=>{ maskBRLInput(valorDeposito,false); userEditedDeposit=true; updateKPIs(); });
    if(ajuste) ajuste.addEventListener('input', ()=>{ maskBRLInput(ajuste,true); updateKPIs(); });

    // Helpers
    function esc(s){return String(s??'').replace(/[&<>"]/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]) )}
    function sumTotal(){ return (Array.isArray(rows)?rows:[]).reduce((s,r)=> s + (Number(r.valor)||0), 0); }

    // Render rows (sem ação Editar)
    function renderRows(){
      tbody.innerHTML = '';
      (Array.isArray(rows)?rows:[]).forEach(r=>{
        const tr = document.createElement('tr');
        if(editModeId===r.id){
          tr.innerHTML = `
            <td>
              <input type="text" value="${esc(r.cliente)}" data-id="${r.id}" data-field="cliente" placeholder="Ex.: Maria Souza"/>
            </td>
            <td>
              <input type="text" inputmode="numeric" value="${esc(r.pedido)}" data-id="${r.id}" data-field="pedido" placeholder="Somente números"/>
              <div class="field-error hidden" data-err="pedido-${r.id}">Este nº de pedido já existe.</div>
            </td>
            <td>
              <input type="text" inputmode="numeric" value="${fmt(r.valor||0)}" data-id="${r.id}" data-field="valor"/>
            </td>
            <td class="actions">
              <button class="primary" data-act="save" data-id="${r.id}">Salvar</button>
              <button class="danger" data-act="cancel" data-id="${r.id}">Cancelar</button>
            </td>`;
        }else{
          tr.innerHTML = `
            <td>${esc(r.cliente||'')}</td>
            <td>${esc(r.pedido||'')}</td>
            <td>${fmt(r.valor||0)}</td>
            <td class="actions">
              <button class="danger" data-act="del" data-id="${r.id}">Excluir</button>
            </td>`;
        }
        tbody.appendChild(tr);
        if(editModeId===r.id){
          const valInput = tr.querySelector('input[data-field="valor"]');
          if(valInput){
            valInput.dataset.value = String(r.valor||0);
            valInput.addEventListener('input', ()=>{ maskBRLInput(valInput,false); });
          }
        }
      });
      updateKPIs();
    }

    // Conciliation rule
    function conciliaOk(total, adj, dep, ajusteOn){
      if(!ajusteOn){
        return Math.abs(dep - total) < tol;
      }else{
        return Math.abs(total - adj - dep) < tol;
      }
    }

    // KPIs + pill
    function updateKPIs(){
      const total = sumTotal();
      if(!userEditedDeposit){
        valorDeposito.dataset.value = String(total);
        valorDeposito.value = fmt(total);
      }
      const adj = toggleAjuste.checked && ajuste ? getBRL(ajuste) : 0;
      const dep = getBRL(valorDeposito);

      kpiTotal.textContent = fmt(total);
      kpiAjuste.textContent = fmt(adj);
      kpiDepositado.textContent = fmt(dep);

      const ok = conciliaOk(total, adj, dep, toggleAjuste.checked);
      pillConc.textContent = ok ? "Conciliado" : (toggleAjuste.checked ? "Ajuste pendente" : "Diferença");
      pillConc.style.borderColor = ok ? "var(--ok)" : "var(--err)";
      pillConc.style.color = ok ? "var(--ok)" : "var(--err)";

      btnFechar.disabled = !(isValidHeader() && isValidRows() && ok);
    }

    // Validations
    function isValidHeader(){
      if(!dtInicio.value || !dtFim.value || !dtDeposito.value) return false;
      if(new Date(dtInicio.value) > new Date(dtFim.value)) return false;
      if(getBRL(valorDeposito) <= 0) return false;
      if(toggleAjuste.checked && Math.abs(getBRL(ajuste))>0 && !String(motivo.value||'').trim()) return false;
      const hasResp = String(responsavel.value||'').trim().length>0;
      respErr.classList.toggle('hidden', hasResp);
      return hasResp;
    }
    function isValidRows(){
      if(!Array.isArray(rows) || rows.length===0) return false;
      const seen = new Set();
      for(const [i,r] of rows.entries()){
        if(!r.cliente || r.cliente.trim()==='') return false;
        const pedStr = String(r.pedido||'').trim();
        if(pedStr==='') return false;
        if(!/^\d+$/.test(pedStr)) return false;
        if(!(Number(r.valor)>0)) return false;
        const key = normPedido(pedStr);
        if(seen.has(key)) return false;
        seen.add(key);
      }
      return true;
    }

    // Header events
    toggleAjuste.addEventListener('change', ()=>{
      ajusteBox.style.display = toggleAjuste.checked ? 'block' : 'none';
      if(!toggleAjuste.checked){ if(ajuste){ajuste.value=''; ajuste.dataset.value='0';} if(motivo){motivo.value='';} }
      updateKPIs();
    });
    ;['input','change'].forEach(evt=>{
      [dtInicio,dtFim,dtDeposito,motivo,responsavel].forEach(el=> el && el.addEventListener(evt, updateKPIs));
    });

    // Adicionar linha (somente criação; sem editar existentes)
    document.getElementById('btnAdd').addEventListener('click', ()=>{
      const id = crypto.randomUUID();
      rows.push({id, cliente:'', pedido:'', valor:0});
      editModeId = id;
      renderRows();
      setTimeout(()=>{
        const first = tbody.querySelector(`input[data-id="${id}"][data-field="cliente"]`);
        if(first) first.focus();
      },0);
    });

    // Limpar todas as linhas (mantido como no original)
    document.getElementById('btnClear').addEventListener('click', ()=>{
      if(confirm('Remover todas as linhas?')){ rows=[]; editModeId=null; renderRows(); userEditedDeposit=false; }
    });

    // Ações de linha (sem editar; excluir protegido por senha)
    tbody.addEventListener('click',(e)=>{
      const act = e.target.getAttribute('data-act');
      if(!act) return;
      const id = e.target.getAttribute('data-id');
      const idx = rows.findIndex(r=>r.id===id);
      if(idx<0) return;

      if(act==='cancel'){ rows.splice(idx,1); editModeId=null; renderRows(); return; }

      if(act==='del'){
        const pwd = prompt('Informe a senha numérica para excluir:');
        if(pwd===DEL_PASS){
          rows.splice(idx,1); editModeId=null; renderRows();
        } // senha errada → não faz nada
        return;
      }

      if(act==='save'){
        const inputs = tbody.querySelectorAll(`input[data-id="${id}"]`);
        const next = {...rows[idx]};
        inputs.forEach(inp=>{
          const f = inp.getAttribute('data-field');
          if(f==='cliente') next[f] = String(inp.value||'').trim();
          if(f==='pedido')  next[f] = String(inp.value||'').trim();
          if(f==='valor')   next[f] = Number(inp.dataset.value||0);
        });

        // validações da linha
        const errEl = tbody.querySelector(`[data-err="pedido-${id}"]`);
        if(errEl) errEl.classList.add('hidden');

        const ped = next.pedido;
        const pedKey = normPedido(ped);
        const isNumeric = /^\d+$/.test(String(ped));
        const duplicate = rows.some(r=> r.id!==id && normPedido(r.pedido)===pedKey);

        if(!next.cliente){ focusField(id,'cliente'); return; }
        if(!String(ped).trim()){ focusField(id,'pedido'); return; }
        if(!isNumeric){ focusField(id,'pedido'); showErr(errEl,'O nº do pedido deve conter apenas dígitos.'); return; }
        if(duplicate){ focusField(id,'pedido'); showErr(errEl,'Este nº de pedido já existe.'); return; }
        if(!(Number(next.valor)>0)){ focusField(id,'valor'); return; }

        rows[idx]=next;
        editModeId=null;
        renderRows();
      }
    });

    function showErr(el,msg){
      if(!el) return;
      el.textContent = msg;
      el.classList.remove('hidden');
    }
    function focusField(id,field){
      const el = tbody.querySelector(`input[data-id="${id}"][data-field="${field}"]`);
      if(el){ el.focus(); el.select?.(); }
    }

    // Validate button
    document.getElementById('btnValidar').addEventListener('click', ()=>{
      const erros = [];
      if(!dtInicio.value || !dtFim.value || !dtDeposito.value) erros.push('Preencha período (início e fim) e a data do depósito.');
      if(dtInicio.value && dtFim.value && new Date(dtInicio.value) > new Date(dtFim.value)) erros.push('Período inválido: início não pode ser maior que fim.');
      if(!(getBRL(valorDeposito)>0)) erros.push('Valor depositado deve ser maior que R$ 0,00.');
      if(toggleAjuste.checked && Math.abs(getBRL(ajuste))>0 && !String(motivo.value||'').trim()) erros.push('Informe a Diferença (±R$) e o Motivo.');
      if(!String(responsavel.value||'').trim()) erros.push('Responsável pelo lançamento é obrigatório.');
      if(rows.length===0) erros.push('Adicione ao menos um pedido.');

      const seen = new Set();
      (Array.isArray(rows)?rows:[]).forEach((r,i)=>{
        if(!r.cliente || r.cliente.trim()==='') erros.push(`Linha ${i+1}: cliente obrigatório.`);
        const pedStr = String(r.pedido||'').trim();
        if(pedStr==='') erros.push(`Linha ${i+1}: nº do pedido obrigatório.`);
        if(!/^\d+$/.test(pedStr)) erros.push(`Linha ${i+1}: nº do pedido deve ser numérico inteiro.`);
        if(!(Number(r.valor)>0)) erros.push(`Linha ${i+1}: valor deve ser maior que R$ 0,00.`);
        const key = normPedido(pedStr);
        if(seen.has(key)) erros.push(`Duplicidade de nº do pedido detectada: ${pedStr}.`);
        seen.add(key);
      });

      const total = sumTotal();
      const dep = getBRL(valorDeposito);
      const adj = toggleAjuste.checked ? getBRL(ajuste) : 0;

      if(!toggleAjuste.checked && Math.abs(dep - total) >= tol){
        erros.push('Diferença detectada: o Valor depositado deve ser igual ao Subtotal. Se houve uso de caixa, marque "Houve diferença/uso de caixa?" e informe o ajuste.');
      }
      if(toggleAjuste.checked && Math.abs(total - adj - dep) >= tol){
        erros.push('Diferença ≠ 0,00: (Subtotal – Ajuste) deve ser igual ao Valor depositado.');
      }

      alert(erros.length ? '⚠️ Problemas encontrados:\n\n' + erros.join('\n') : '✅ Tudo certo.');
    });

    // Fechar lote (salva no histórico e limpa formulário)
    document.getElementById('btnFechar').addEventListener('click', ()=>{
      const total = sumTotal();
      const dep = getBRL(valorDeposito);
      const adj = toggleAjuste.checked ? getBRL(ajuste) : 0;
      if(!(isValidHeader() && isValidRows() && conciliaOk(total, adj, dep, toggleAjuste.checked))) return;

      const lot = {
        id: crypto.randomUUID(),
        inicio: dtInicio.value, fim: dtFim.value, dataDeposito: dtDeposito.value,
        valorDeposito: dep,
        diferenca: toggleAjuste.checked ? adj : 0,
        motivo: toggleAjuste.checked ? (motivo.value||'') : '',
        subtotal: total,
        pedidos: (Array.isArray(rows)?rows:[]).map(p=>({cliente:p.cliente, pedido: Number(p.pedido), valor: Number(p.valor)})),
        responsavel: String(responsavel.value||'').trim(),
        createdAt: Date.now(),
      };
      lots.unshift(lot); // topo
      renderHistorico();

      // Reset formulário
      dtInicio.value=''; dtFim.value=''; dtDeposito.value='';
      valorDeposito.value=''; valorDeposito.dataset.value='0'; userEditedDeposit=false;
      toggleAjuste.checked=false; ajusteBox.style.display='none'; if(ajuste){ajuste.value=''; ajuste.dataset.value='0';} if(motivo){motivo.value='';}
      responsavel.value=''; respErr.classList.add('hidden');
      rows=[]; editModeId=null;
      renderRows(); updateKPIs();
    });

    // Histórico
    function renderHistorico(){
      const tbodyH = $('#tbodyHist');
      const list = applyHistoryFilter(lots);
      tbodyH.innerHTML = '';
      if(!Array.isArray(list) || list.length===0){
        const tr = document.createElement('tr');
        tr.innerHTML = '<td class="muted" colspan="8">Sem registros.</td>';
        tbodyH.appendChild(tr);
        setHistTotals(0,0,0,0);
        return;
      }
      let tAdj=0, tDep=0, tSub=0, tQtd=0;
      list.forEach(rec=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${formatRange(rec.inicio, rec.fim)}</td>
          <td>${formatDate(rec.dataDeposito)}</td>
          <td>${fmt(rec.subtotal)}</td>
          <td>${fmt(rec.diferenca)}</td>
          <td>${fmt(rec.valorDeposito)}</td>
          <td class="nowrap">${Array.isArray(rec.pedidos)?rec.pedidos.length:0}</td>
          <td class="nowrap">${esc(rec.responsavel||'')}</td>
          <td class="actions">
            <button class="primary" data-hact="view" data-id="${rec.id}">Visualizar</button>
            <button class="danger" data-hact="del" data-id="${rec.id}">Excluir</button>
          </td>`;
        tbodyH.appendChild(tr);
        tAdj += Number(rec.diferenca)||0;
        tDep += Number(rec.valorDeposito)||0;
        tSub += Number(rec.subtotal)||0;
        tQtd += Number(rec.pedidos?.length||0);
      });
      setHistTotals(tSub,tAdj,tDep,tQtd);
    }
    function setHistTotals(sub,adj,dep,qtd){
      $('#ftSubtotal').textContent = fmt(sub);
      $('#ftAjuste').textContent = fmt(adj);
      $('#ftDepositado').textContent = fmt(dep);
      $('#ftQtd').textContent = String(qtd);
    }

    function applyHistoryFilter(list){
      const m = $('#fCompetencia').value;
      const ini = $('#fInicio').value;
      const fim = $('#fFim').value;
      if(!m && !ini && !fim) return Array.isArray(list)?list:[];
      return (Array.isArray(list)?list:[]).filter(r=>{
        const d = new Date(r.dataDeposito+'T00:00:00');
        let ok = true;
        if(m){
          const [yy,mm] = m.split('-').map(Number);
          ok = ok && d.getFullYear()===yy && (d.getMonth()+1)===mm;
        }
        if(ini){ ok = ok && d >= new Date(ini+'T00:00:00'); }
        if(fim){ ok = ok && d <= new Date(fim+'T00:00:00'); }
        return ok;
      });
    }
    document.getElementById('btnAplicarFiltro').addEventListener('click', renderHistorico);
    document.getElementById('btnLimparFiltro').addEventListener('click', ()=>{
      $('#fCompetencia').value=''; $('#fInicio').value=''; $('#fFim').value=''; renderHistorico();
    });

    // ---- Modal helpers ----
    const modal = $('#modal');
    const modalBody = $('#modalBody');
    const btnCloseModal = $('#btnCloseModal');
    const btnPrint = $('#btnPrint');

    function openModal(html){
      modalBody.innerHTML = html;
      modal.setAttribute('aria-hidden','false');
      document.body.style.overflow='hidden';
      btnCloseModal.focus();
    }
    function closeModal(){
      modal.setAttribute('aria-hidden','true');
      document.body.style.overflow='';
      modalBody.innerHTML='';
    }
    btnCloseModal.addEventListener('click', closeModal);
    modal.addEventListener('click', (e)=>{ if(e.target === modal) closeModal(); });
    window.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && modal.getAttribute('aria-hidden')==='false') closeModal(); });
    btnPrint.addEventListener('click', ()=>{ window.print(); });

    // Histórico actions (sem editar; excluir com senha)
    document.addEventListener('click',(e)=>{
      const act = e.target.getAttribute('data-hact');
      if(!act) return;
      const id = e.target.getAttribute('data-id');
      const idx = (Array.isArray(lots)?lots:[]).findIndex(x=>x.id===id);
      if(idx<0) return;

      if(act==='view'){
        const r = lots[idx];
        const statusOk = (Math.abs((r.subtotal - (r.diferenca||0)) - (r.valorDeposito||0)) < tol);
        const statusTag = `<span class="tag" style="border-color:${statusOk?'var(--ok)':'var(--err)'};color:${statusOk?'var(--ok)':'var(--err)'}">${statusOk?'Conciliado':'Com diferença'}</span>`;
        const pedidosRows = (Array.isArray(r.pedidos)?r.pedidos:[]).map((p,i)=>`
          <tr>
            <td class="nowrap">${i+1}</td>
            <td>${esc(p.cliente)}</td>
            <td class="nowrap">PED ${esc(p.pedido)}</td>
            <td class="nowrap" style="text-align:right">${fmt(p.valor)}</td>
          </tr>`).join('');

        const html = `
          <div class="grid-2">
            <div>
              <div class="muted">Período</div>
              <div style="font-weight:800">${formatRange(r.inicio, r.fim)}</div>
            </div>
            <div>
              <div class="muted">Depósito</div>
              <div style="font-weight:800">${formatDate(r.dataDeposito)}</div>
            </div>
          </div>

          <div style="margin:12px 0">${statusTag}</div>

          <div style="margin:6px 0">
            <div class="muted">Responsável</div>
            <div style="font-weight:800">${esc(r.responsavel||'')}</div>
          </div>

          <div class="table-wrap" style="margin-top:6px">
            <table>
              <thead>
                <tr>
                  <th>#</th>
                  <th>Cliente</th>
                  <th>Pedido</th>
                  <th style="text-align:right">Valor (R$)</th>
                </tr>
              </thead>
              <tbody>
                ${pedidosRows || `<tr><td colspan="4" class="muted">Sem pedidos.</td></tr>`}
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="3" class="nowrap">Subtotal</td>
                  <td class="nowrap" style="text-align:right">${fmt(r.subtotal)}</td>
                </tr>
                <tr>
                  <td colspan="3" class="nowrap">Ajuste de Caixa ${r.motivo ? `(Motivo: ${esc(r.motivo)})` : ''}</td>
                  <td class="nowrap" style="text-align:right">${fmt(r.diferenca||0)}</td>
                </tr>
                <tr>
                  <td colspan="3" class="nowrap">Valor Depositado</td>
                  <td class="nowrap" style="text-align:right">${fmt(r.valorDeposito||0)}</td>
                </tr>
              </tfoot>
            </table>
          </div>
        `;
        openModal(html);
      }

      if(act==='del'){
        const pwd = prompt('Informe a senha numérica para excluir:');
        if(pwd===DEL_PASS){
          lots.splice(idx,1); renderHistorico();
        }
        return;
      }
    });

    function formatDate(str){
      if(!str) return '';
      // Aceita YYYY-MM-DD e imprime DD/MM/AAAA
      const d = new Date(str+'T00:00:00');
      const dd = String(d.getDate()).padStart(2,'0');
      const mm = String(d.getMonth()+1).padStart(2,'0');
      const yyyy = d.getFullYear();
      return `${dd}/${mm}/${yyyy}`;
    }
    function formatRange(a,b){
      if(!a && !b) return '';
      const da = formatDate(a), db = formatDate(b);
      if(da===db || !db) return da;
      if(!da) return db;
      return `${da} a ${db}`;
    }

    renderRows(); updateKPIs();
  </script>

  <!-- Firebase SDKs (versão web standalone / sem bundler) -->
  <script type="module">
    // Import dos SDKs (versão web standalone / sem bundler)
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-analytics.js";
    import { getAuth } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-auth.js";
    import { getFirestore } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-firestore.js";

    // Configuração fornecida pelo Firebase
    const firebaseConfig = {
      apiKey: "AIzaSyDuGe6qPKs2mMjf1IQNkEGzu0ybwGU0rxg",
      authDomain: "recebimento-em-lote.firebaseapp.com",
      projectId: "recebimento-em-lote",
      storageBucket: "recebimento-em-lote.firebasestorage.app",
      messagingSenderId: "1060968440971",
      appId: "1:1060968440971:web:dbb5c264f8a85f86e6608e",
      measurementId: "G-KZBGQVMG50"
    };

    // Inicializar o app
    const app = initializeApp(firebaseConfig);

    // Analytics (só funciona em HTTPS ou localhost)
    try { getAnalytics(app); } catch (e) {}

    // Instâncias básicas para usar depois
    const auth = getAuth(app);
    const db   = getFirestore(app);

    // (Opcional) tornar acessível no console do navegador
    window.firebase = { app, auth, db };
  </script>
</body>
</html>
